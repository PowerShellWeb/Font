<!-- Generated with EZOut 2.0.6: Install-Module EZOut or https://github.com/StartAutomating/EZOut -->
<Types>
  <Type>
    <Name>Font.File</Name>
    <Members>
      <AliasProperty>
        <Name>Family</Name>
        <ReferencedMemberName>FamilyName</ReferencedMemberName>
      </AliasProperty>
      <AliasProperty>
        <Name>FontFamily</Name>
        <ReferencedMemberName>FamilyName</ReferencedMemberName>
      </AliasProperty>
      <ScriptProperty>
        <Name>FamilyName</Name>
        <GetScriptBlock>
                        $this.Name.Substring(0, $this.Name.Length - $this.Extension.Length) -replace '-.+?$'
                    </GetScriptBlock>
      </ScriptProperty>
    </Members>
  </Type>
  <Type>
    <Name>Font.Glyph</Name>
    <Members>
      <ScriptProperty>
        <Name>PathData</Name>
        <GetScriptBlock>
                        &lt;#
.SYNOPSIS
    Gets the glyph path data
.DESCRIPTION
    Gets the glyph path data.
    
    Glyph paths are drawn upside down by default.
#&gt;
$this.d
                    </GetScriptBlock>
      </ScriptProperty>
    </Members>
  </Type>
  <Type>
    <Name>Font.svg</Name>
    <Members>
      <AliasProperty>
        <Name>Face</Name>
        <ReferencedMemberName>FontFace</ReferencedMemberName>
      </AliasProperty>
      <AliasProperty>
        <Name>Family</Name>
        <ReferencedMemberName>FamilyName</ReferencedMemberName>
      </AliasProperty>
      <AliasProperty>
        <Name>FontFamily</Name>
        <ReferencedMemberName>FamilyName</ReferencedMemberName>
      </AliasProperty>
      <ScriptMethod>
        <Name>GetGlyph</Name>
        <Script>
                        param(
[PSObject]$value
)

filter toGlyph {    
    $_.Node.pstypenames.add('Font.glyph')
    $_.Node
}
if ($value -is [string] -and $value.Length -le 2) {
    $escapedValue = $($value -replace "'","''")
    $this.XML | 
        Select-Xml -Namespace @{s='http://www.w3.org/2000/svg'} -XPath "//s:glyph[@unicode='$escapedValue'] | //s:glyph[@glyph-name='$escapedValue']" | 
        toGlyph
}

if ($null -eq $value) {
    $this.XML | 
        Select-Xml -Namespace @{s='http://www.w3.org/2000/svg'} -XPath "//s:glyph" |
        toGlyph
}

                    </Script>
      </ScriptMethod>
      <ScriptProperty>
        <Name>Ascent</Name>
        <GetScriptBlock>
                        $this.FontFace.'ascent' -as [float]
                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>BoundingBox</Name>
        <GetScriptBlock>
                        $this.FontFace.bbox -split '\s' -as [float[]]
                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Descent</Name>
        <GetScriptBlock>
                        $this.FontFace.'descent' -as [float]
                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>FamilyName</Name>
        <GetScriptBlock>
                        $this.FontFace.'font-family'    
                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>FontFace</Name>
        <GetScriptBlock>
                        $this.XML | 
    Select-Xml -Namespace @{s='http://www.w3.org/2000/svg'} -XPath //s:font-face |
    Select-Object -ExpandProperty Node
                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>FontStyle</Name>
        <GetScriptBlock>
                        $this.FontFace.'font-style'
                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>FontWeight</Name>
        <GetScriptBlock>
                        $this.FontFace.'font-weight'
                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>UnitsPerEm</Name>
        <GetScriptBlock>
                        $this.FontFace.'units-per-em' -as [float]
                    </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>XML</Name>
        <GetScriptBlock>
                        if (-not $this.'#XML') {
    if ($this -is [IO.FileInfo] -and $this.Extension -eq '.svg') {
        $svgXml = (Get-Content -LiteralPath $this.FullName -Raw) -as [xml]
        if ($svgXml) {
            $this | Add-Member NoteProperty '#XML' $svgXml -Force
        }
    }
}
return $this.'#XML'
                    </GetScriptBlock>
      </ScriptProperty>
    </Members>
  </Type>
</Types>